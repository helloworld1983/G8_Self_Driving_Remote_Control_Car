/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */



#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
//#include <newlib_malloc.c>


#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>


#define PWM_BASEADDR 0x44A00000
#define PWM_FBADDR 0x44A00004
#define PWM_LRADDR 0x44A00008

#define LEFT 0xFFFF0000
#define RIGHT 0x0000FFFF
#define STRAIGHT 0

#define FF 0xFFFF0000
#define HF 0x80000000
#define STOP 0x00000000

#define TRESH_DIR 10
#define TRESH_Y_SPEED 75
#define gweight 10

#define edge1 0xC0000000;
#define edge2 0xC0002000;
#define edge3 0xC0004000;




//#define coef 2
//#define jump 10
#define coef 1
#define jump 5

volatile unsigned int *ctr = (unsigned int *) PWM_BASEADDR;
volatile unsigned int *FB = (unsigned int *) PWM_FBADDR;
volatile unsigned int *LR = (unsigned int *) PWM_LRADDR;
int goal_x;
int goal_y;
int start_x;
int start_y;
int g_x;
int g_y;

//int edge_x[1404]={299, 297, 298, 299, 300, 301, 295, 296, 301, 302, 294, 302, 293, 302, 292, 302, 290, 291, 302, 288, 289, 301, 287, 300, 285, 286, 299, 283, 284, 298, 280, 281, 282, 297, 278, 279, 295, 296, 275, 276, 277, 293, 294, 272, 273, 274, 292, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 269, 270, 271, 290, 291, 131, 132, 133, 134, 135, 136, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 267, 268, 288, 289, 128, 129, 130, 195, 196, 197, 198, 199, 200, 201, 202, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 264, 265, 266, 286, 287, 125, 126, 127, 203, 204, 205, 206, 207, 208, 209, 210, 211, 256, 257, 258, 259, 260, 261, 262, 263, 284, 285, 122, 123, 124, 281, 282, 283, 119, 120, 121, 278, 279, 280, 117, 118, 275, 276, 277, 115, 116, 272, 273, 274, 113, 114, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 269, 270, 271, 111, 112, 131, 132, 133, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 263, 264, 265, 266, 267, 268, 110, 128, 129, 130, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 108, 109, 125, 126, 127, 107, 122, 123, 124, 106, 120, 121, 104, 105, 119, 103, 117, 118, 101, 102, 115, 116, 100, 113, 114, 98, 99, 112, 96, 97, 111, 94, 95, 110, 92, 93, 108, 109, 89, 90, 91, 107, 87, 88, 105, 106, 85, 86, 104, 83, 84, 102, 103, 81, 82, 100, 101, 78, 79, 80, 98, 99, 75, 76, 77, 95, 96, 97, 73, 74, 93, 94, 70, 71, 72, 90, 91, 92, 68, 69, 88, 89, 66, 67, 86, 87, 63, 64, 65, 84, 85, 62, 82, 83, 60, 61, 80, 81, 58, 59, 77, 78, 79, 57, 74, 75, 76, 55, 56, 71, 72, 73, 53, 54, 69, 70, 51, 52, 68, 49, 50, 66, 67, 47, 48, 64, 65, 45, 46, 63, 43, 44, 61, 62, 41, 42, 59, 60, 39, 40, 57, 58, 37, 38, 55, 56, 110, 111, 112, 113, 114, 115, 141, 142, 143, 144, 145, 35, 36, 53, 54, 108, 109, 116, 117, 118, 119, 120, 121, 122, 123, 124, 137, 138, 139, 140, 146, 147, 148, 34, 51, 52, 107, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 149, 150, 32, 33, 49, 50, 106, 151, 152, 153, 154, 155, 156, 157, 31, 47, 48, 106, 158, 159, 160, 161, 162, 29, 30, 45, 46, 106, 107, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 28, 43, 44, 107, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 26, 27, 41, 42, 108, 109, 194, 195, 196, 197, 198, 199, 25, 40, 110, 111, 112, 113, 114, 200, 201, 202, 23, 24, 38, 39, 115, 116, 117, 118, 119, 120, 121, 203, 204, 205, 206, 207, 21, 22, 37, 122, 123, 124, 125, 126, 127, 128, 129, 208, 209, 210, 211, 212, 213, 214, 20, 35, 36, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 215, 216, 217, 218, 219, 18, 19, 34, 162, 163, 164, 165, 166, 167, 168, 220, 221, 222, 223, 224, 16, 17, 32, 33, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 225, 226, 227, 228, 229, 230, 13, 14, 15, 31, 192, 193, 194, 195, 196, 231, 232, 233, 234, 235, 9, 10, 11, 12, 29, 30, 197, 198, 199, 236, 237, 238, 239, 240, 241, 242, 5, 6, 7, 8, 27, 28, 200, 201, 202, 203, 204, 205, 243, 244, 245, 246, 247, 3, 4, 25, 26, 206, 207, 208, 209, 210, 211, 212, 248, 249, 250, 251, 2, 23, 24, 213, 214, 215, 216, 217, 218, 252, 253, 254, 255, 256, 257, 1, 21, 22, 219, 220, 221, 258, 259, 260, 0, 20, 221, 222, 223, 261, 262, 263, 264, 265, 266, 267, 268, 269, 0, 18, 19, 223, 270, 271, 272, 0, 16, 17, 223, 224, 273, 274, 275, 276, 277, 278, 1, 14, 15, 224, 279, 280, 281, 282, 283, 284, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 2, 3, 12, 13, 223, 224, 240, 241, 242, 243, 244, 245, 246, 247, 248, 285, 286, 287, 288, 289, 290, 291, 331, 332, 333, 334, 335, 336, 337, 348, 349, 3, 4, 5, 6, 7, 8, 9, 10, 11, 222, 223, 238, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 292, 293, 294, 295, 296, 297, 298, 328, 329, 330, 349, 220, 221, 236, 237, 261, 262, 263, 264, 265, 299, 300, 301, 302, 303, 326, 327, 350, 219, 234, 235, 266, 267, 268, 269, 304, 305, 306, 307, 325, 350, 217, 218, 233, 270, 271, 272, 308, 309, 310, 311, 312, 323, 324, 349, 215, 216, 231, 232, 273, 274, 275, 276, 277, 313, 314, 315, 320, 321, 322, 349, 213, 214, 229, 230, 278, 279, 280, 316, 317, 318, 319, 348, 212, 227, 228, 281, 282, 283, 284, 285, 347, 210, 211, 224, 225, 226, 286, 287, 288, 289, 290, 291, 346, 208, 209, 222, 223, 292, 293, 294, 295, 296, 345, 206, 207, 220, 221, 297, 298, 299, 300, 301, 302, 344, 204, 205, 219, 303, 304, 305, 343, 202, 203, 217, 218, 305, 306, 342, 201, 215, 216, 306, 342, 199, 200, 214, 306, 343, 196, 197, 198, 212, 213, 307, 343, 194, 195, 211, 306, 343, 344, 191, 192, 193, 209, 210, 305, 306, 344, 345, 189, 190, 207, 208, 304, 346, 187, 188, 205, 206, 303, 347, 348, 185, 186, 204, 302, 349, 183, 184, 202, 203, 301, 350, 351, 181, 182, 200, 201, 300, 333, 334, 335, 352, 179, 180, 198, 199, 299, 331, 332, 336, 337, 353, 178, 196, 197, 298, 330, 338, 339, 354, 355, 176, 177, 193, 194, 195, 297, 329, 340, 341, 356, 357, 174, 175, 191, 192, 298, 327, 328, 342, 343, 358, 173, 188, 189, 190, 298, 326, 327, 344, 345, 359, 360, 171, 172, 186, 187, 298, 299, 326, 346, 347, 361, 169, 170, 184, 185, 300, 325, 348, 362, 168, 182, 183, 301, 302, 303, 304, 323, 324, 349, 350, 363, 364, 166, 167, 181, 305, 306, 307, 308, 309, 322, 351, 352, 365, 165, 179, 180, 310, 311, 312, 313, 320, 321, 353, 366, 367, 163, 164, 177, 178, 314, 315, 316, 317, 318, 319, 354, 355, 368, 162, 175, 176, 356, 369, 370, 160, 161, 174, 357, 371, 159, 173, 358, 359, 372, 373, 158, 171, 172, 360, 374, 157, 170, 361, 375, 156, 169, 362, 363, 376, 377, 156, 167, 168, 364, 378, 156, 157, 165, 166, 365, 366, 379, 157, 158, 162, 163, 164, 367, 380, 381, 158, 159, 160, 161, 368, 369, 382, 370, 383, 371, 372, 384, 373, 385, 374, 386, 375, 387, 376, 388, 377, 378, 389, 379, 390, 380, 391, 381, 392, 382, 393, 383, 394, 384, 395, 385, 396, 386, 396, 386, 397, 387, 398, 388, 389, 390, 391, 392, 393, 393, 394, 395, 395, 396, 397, 398, 398};
//int edge_y[1404]={34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 84, 84, 84, 84, 85, 85, 85, 85, 85, 86, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 90, 90, 90, 90, 91, 91, 91, 91, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 135, 135, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 160, 160, 160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 162, 162, 162, 162, 162, 162, 162, 162, 163, 163, 163, 163, 163, 163, 163, 164, 164, 165, 165, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 192, 193};
//int edge_l=1404;

//int edge_x[436]={12, 34, 14, 44, 92, 158, 36, 166, 86, 90, 186, 194, 22, 116, 2, 198, 126, 4, 62, 102, 134, 112, 46, 168, 88, 188, 70, 148, 162, 50, 164, 110, 168, 134, 40, 106, 176, 140, 172, 68, 174, 118, 150, 126, 122, 16, 98, 56, 104, 100, 148, 190, 110, 32, 94, 108, 86, 90, 174, 142, 172, 20, 194, 136, 52, 0, 78, 4, 98, 130, 10, 132, 14, 112, 84, 86, 182, 184, 190, 186, 198, 122, 48, 196, 144, 146, 76, 110, 90, 132, 170, 66, 142, 120, 146, 104, 148, 54, 78, 134, 88, 94, 176, 178, 84, 114, 180, 142, 68, 16, 18, 26, 142, 150, 30, 126, 174, 88, 144, 54, 98, 56, 106, 32, 12, 86, 134, 14, 166, 94, 90, 138, 86, 66, 96, 192, 90, 98, 0, 196, 24, 78, 156, 4, 100, 130, 58, 80, 82, 112, 170, 116, 118, 98, 164, 122, 100, 148, 144, 102, 146, 188, 76, 108, 110, 44, 128, 92, 136, 84, 132, 82, 66, 46, 18, 120, 22, 148, 96, 54, 78, 152, 100, 92, 136, 94, 42, 88, 114, 172, 18, 28, 174, 152, 24, 154, 102, 96, 106, 128, 8, 82, 92, 132, 156, 34, 44, 110, 94, 138, 86, 70, 118, 66, 96, 120, 186, 98, 74, 22, 196, 124, 26, 52, 54, 150, 108, 100, 102, 82, 112, 64, 120, 100, 162, 102, 60, 38, 130, 92, 40, 136, 84, 176, 112, 116, 160, 162, 150, 74, 52, 96, 100, 108, 62, 40, 12, 42, 108, 88, 168, 64, 174, 88, 88, 28, 192, 68, 52, 96, 128, 82, 94, 134, 114, 70, 190, 120, 198, 194, 74, 124, 58, 150, 60, 110, 116, 64, 140, 170, 90, 148, 148, 106, 54, 78, 148, 60, 38, 176, 138, 112, 180, 142, 16, 124, 150, 30, 74, 152, 102, 104, 150, 80, 108, 62, 84, 136, 84, 86, 64, 140, 170, 184, 142, 72, 68, 194, 0, 76, 26, 56, 184, 158, 6, 28, 56, 130, 10, 58, 80, 116, 198, 146, 160, 48, 104, 60, 108, 128, 104, 80, 142, 90, 78, 92, 72, 20, 164, 52, 148, 106, 192, 138, 82, 178, 180, 182, 188, 124, 30, 24, 154, 146, 58, 6, 80, 84, 34, 92, 36, 86, 140, 144, 192, 72, 20, 196, 76, 2, 126, 54, 150, 8, 62, 10, 58, 102, 80, 112, 114, 182, 170, 78, 70, 48, 50, 106, 108, 104, 130, 136, 80, 82, 172, 118, 162, 72, 122, 152, 110, 40, 154, 44, 34, 178, 160, 172, 168, 142, 172, 174, 152, 58, 6, 98};
//int edge_y[436]={56, 40, 50, 38, 24, 76, 38, 70, 50, 70, 82, 92, 44, 24, 56, 96, 60, 54, 30, 68, 60, 64, 38, 70, 50, 80, 52, 70, 72, 32, 70, 54, 72, 24, 42, 66, 72, 26, 64, 52, 74, 28, 70, 24, 24, 48, 28, 48, 26, 26, 60, 82, 28, 40, 72, 66, 24, 28, 68, 62, 58, 52, 86, 62, 50, 56, 24, 60, 50, 60, 58, 58, 54, 54, 74, 54, 74, 76, 86, 78, 88, 60, 32, 86, 20, 22, 52, 56, 74, 28, 64, 52, 26, 24, 24, 52, 22, 48, 48, 28, 54, 50, 76, 78, 78, 28, 72, 20, 48, 54, 52, 44, 64, 74, 40, 28, 58, 76, 60, 34, 24, 52, 28, 44, 50, 28, 58, 56, 60, 24, 24, 62, 72, 28, 68, 88, 76, 70, 60, 92, 44, 28, 62, 56, 56, 56, 28, 52, 54, 58, 68, 62, 60, 72, 72, 56, 70, 72, 24, 52, 18, 84, 48, 62, 60, 40, 28, 54, 24, 54, 24, 76, 48, 34, 46, 28, 50, 18, 24, 52, 52, 68, 28, 68, 22, 54, 40, 24, 24, 72, 48, 46, 62, 64, 50, 74, 28, 50, 24, 56, 58, 28, 74, 60, 76, 42, 36, 64, 28, 58, 76, 24, 54, 24, 72, 56, 84, 66, 28, 46, 88, 60, 42, 30, 28, 16, 52, 52, 70, 50, 62, 48, 54, 66, 74, 56, 52, 38, 26, 50, 40, 28, 50, 70, 24, 28, 62, 60, 64, 52, 34, 28, 24, 28, 48, 38, 52, 36, 64, 28, 60, 24, 70, 72, 70, 42, 82, 28, 48, 54, 60, 24, 68, 62, 54, 28, 80, 60, 90, 90, 24, 56, 32, 20, 30, 58, 54, 52, 22, 66, 54, 64, 20, 56, 50, 50, 74, 48, 42, 74, 26, 28, 78, 22, 52, 28, 68, 42, 48, 74, 26, 28, 60, 24, 24, 52, 28, 58, 80, 74, 28, 62, 58, 80, 60, 24, 24, 84, 58, 28, 48, 32, 82, 62, 60, 48, 28, 58, 56, 30, 50, 60, 94, 64, 74, 34, 56, 26, 60, 26, 64, 76, 24, 50, 78, 70, 48, 46, 60, 36, 16, 52, 84, 22, 80, 76, 74, 80, 78, 24, 46, 48, 76, 60, 52, 54, 28, 24, 44, 28, 42, 78, 58, 64, 90, 28, 50, 94, 24, 60, 56, 30, 18, 54, 26, 52, 26, 64, 54, 60, 62, 76, 72, 80, 48, 38, 36, 62, 56, 68, 28, 26, 80, 74, 68, 24, 62, 52, 28, 60, 24, 36, 62, 34, 38, 72, 76, 74, 58, 58, 62, 60, 66, 48, 58, 54};
//int edge_l=436;

//int edge_x[236]={86, 64, 44, 76, 160, 140, 148, 178, 174, 152, 198, 80, 158, 166, 54, 126, 174, 62, 138, 136, 196, 160, 140, 138, 162, 58, 188, 166, 114, 156, 156, 116, 66, 166, 162, 62, 192, 172, 136, 132, 126, 122, 88, 112, 176, 98, 164, 178, 170, 182, 180, 172, 152, 182, 164, 124, 120, 168, 160, 146, 104, 148, 166, 162, 150, 106, 152, 100, 114, 164, 108, 190, 154, 88, 60, 186, 184, 130, 70, 72, 94, 146, 160, 50, 104, 66, 148, 40, 54, 68, 198, 164, 108, 154, 166, 48, 128, 134, 62, 172, 54, 92, 64, 44, 142, 90, 150, 114, 166, 156, 108, 154, 176, 186, 110, 126, 52, 98, 196, 74, 56, 42, 78, 194, 58, 116, 194, 164, 192, 170, 186, 122, 102, 92, 172, 96, 46, 112, 142, 114, 180, 170, 182, 110, 38, 170, 168, 50, 124, 186, 82, 144, 86, 34, 94, 158, 56, 66, 96, 174, 168, 100, 158, 130, 194, 120, 46, 88, 188, 150, 148, 80, 156, 198, 162, 160, 84, 128, 52, 50, 132, 126, 118, 194, 138, 58, 90, 66, 190, 36, 120, 170, 84, 76, 74, 58, 88, 54, 78, 176, 106, 94, 72, 32, 154, 60, 178, 168, 184, 164, 174, 70, 168, 82, 144, 102, 34, 146, 172, 104, 150, 46, 78, 162, 174, 68, 170, 50, 48, 118, 134, 62, 168, 180, 82, 144};
//int edge_y[236]={96, 108, 114, 100, 74, 80, 78, 112, 58, 76, 106, 98, 76, 70, 114, 84, 114, 104, 82, 78, 102, 62, 76, 76, 60, 106, 108, 112, 90, 116, 64, 84, 104, 60, 114, 108, 108, 114, 82, 82, 82, 82, 100, 90, 110, 96, 60, 108, 112, 110, 106, 110, 118, 112, 112, 82, 82, 60, 114, 72, 94, 70, 116, 72, 118, 92, 68, 90, 86, 70, 90, 108, 116, 96, 110, 106, 106, 80, 102, 104, 92, 78, 76, 112, 88, 108, 72, 116, 112, 106, 104, 72, 92, 76, 68, 112, 84, 78, 106, 64, 108, 98, 104, 118, 76, 94, 70, 88, 118, 66, 86, 118, 114, 108, 90, 80, 110, 92, 106, 100, 108, 114, 102, 102, 112, 88, 106, 114, 104, 66, 104, 86, 94, 94, 58, 92, 118, 86, 80, 84, 112, 116, 106, 86, 116, 110, 66, 114, 86, 110, 98, 78, 100, 118, 96, 116, 112, 106, 96, 62, 112, 94, 64, 84, 108, 88, 112, 94, 104, 68, 76, 102, 76, 100, 118, 116, 96, 80, 114, 110, 78, 86, 88, 104, 78, 108, 98, 102, 104, 116, 86, 58, 100, 104, 104, 110, 98, 110, 98, 108, 88, 98, 100, 118, 66, 106, 114, 68, 110, 118, 110, 106, 58, 96, 80, 90, 116, 74, 62, 92, 76, 114, 104, 74, 60, 102, 64, 116, 116, 84, 82, 110, 116, 108, 102, 74};
//int edge_l=236;


struct node {
   int x;
   int y;
   int g, f;
   struct node *next;
   struct node *parent;
};
struct edge {
	int x;
	int y;
	struct edge *next;
};
struct node *path, *frontier;
struct node *free_nodes = 0;
struct edge *edgelist=0;
struct edge *free_edges=0;;
struct node *barrier;


int h=100;
int w=100;



struct node *PREALLOCATE_NODES(int k)
{
	struct node *o;
	struct node *l;
	o=malloc(sizeof(struct node));

	l=o;
	o->next=0;
	int i;
	for(i=0;i<k;i++)
	{
		o->next=malloc(sizeof(struct node));
		if(!o->next)
			{
				xil_printf("%d OOM NODES\n",i);
				//getchar();
			}
		o=o->next;
	}
	xil_printf("NODES PREALLOCATED\n");
	return l;
}


struct edge *PREALLOCATE_EDGES(int k)
{
	struct edge *o;
	struct edge *l;
	o=malloc(sizeof(struct edge));
	//xil_printf("X: %u\n",o);
	l=o;
	o->next=0;
	int i;
	for(i=0;i<k;i++)
	{
		o->next=malloc(sizeof(struct edge));
		if(!o->next)
			{
				xil_printf("%d OOM EDGES\n",i);
				xil_printf("%u\n",o->next);
				//getchar();
			}
		o=o->next;
	}
	xil_printf("EDGES PREALLOCATED\n");
	return l;
}

struct node *GET_NODE()
{
	struct node *g;
	g = free_nodes;
	if(free_nodes->next)
		free_nodes=free_nodes->next;
	else
	{
		free_nodes->next = malloc(sizeof(struct node));;
		free_nodes=free_nodes->next;
		free_nodes->next=0;
		print("MORE NODES");
	}
	return g;
}


struct edge *GET_EDGE()
{
	struct edge *g;
	g = free_edges;
	if(free_edges->next)
		free_edges=free_edges->next;
	else
	{
		free_edges->next = malloc(sizeof(struct edge));
		free_edges=free_edges->next;
		free_edges->next=0;
		print("MORE EDGES");
	}
	return g;
}


int RELEASE_NODE(struct node *x)
{
	x->parent=0;
	x->next=free_nodes;
	free_nodes=x;
	return 0;
}

int RELEASE_EDGE(struct edge *x)
{
	x->next=free_edges;
	free_edges=x;
	return 0;
}

int CLEAR_FREE_LISTS()
{
	struct node *n;
	while(free_nodes->next)
		{
			n=free_nodes->next;
			free(free_nodes);
			free_nodes=n;
		}
	free(free_nodes);

	struct edge *e;
	while(free_edges->next)
		{
			e=free_edges->next;
			free(free_edges);
			free_edges=e;
		}
	free(free_edges);
	return 1;
}
unsigned int sqrt32(unsigned n)
{
    unsigned int c = 0x8000;
    unsigned int g = 0x8000;

    for(;;) {
        if(g*g > n)
            g ^= c;
        c >>= 1;
        if(c == 0)
            return g;
        g |= c;
    }
}

int ESTIMATE_SIZE(int x, int y)
{
	float w0=12.0;
	float h0=5.0;
	float w1=0.0;
	float h_e=2*(((float)y)*h0)/((float) h);
    float d=sqrt(w0*w0+w1*w1)*sqrt(w0*w0+(h0-h_e)*(h0-h_e))*(1+h_e/(h0-h_e));
    float w_e=d/156.0;
    int r = coef*((int) 25.0/( w_e));
	if(r>4)
		return r;
    return 4;

}

int GENERATE_EDGE_LIST()
{

	int x,y;

	struct edge *e=edgelist;
	volatile unsigned int *bedge = (unsigned int*) edge1;
	int i=0;
	while((i < 2048) || *bedge!=0xFFFFF )
    {
		xil_printf("ADDr: %d \n",i);
		x=0x3FF&(*bedge);
		y=0x3FF&((*bedge)>>10);
		i++;
		bedge++;
    	e=edgelist;
    	//xil_printf("%u", edgelist);
        if(edgelist)
		{
			while(e->next)
				e=e->next;
			e->next=GET_EDGE();
			e=e->next;
			e->x=x;
			e->y=y;
			e->next=0;
		}
		else
		{
			edgelist=GET_EDGE();
			edgelist->x=x;
			edgelist->y=y;
			edgelist->next=0;
		}

    }
	return 1;
}




struct node *ADD(struct node *list, struct node *new)
{
	struct node *o;
	o=list;
	if(o)
	{
		while(o->next)
			o=o->next;
		o->next=new;
	}
	else
		list = new;
	return list;
}


struct node *NEW(int x, int y, int f, int g, struct node *parent, struct node *list)
{
	struct node *o;
	o=GET_NODE();
	o->x=x;
	o->y=y;
	o->g=g;
	o->f=f;
	o->parent=parent;
	o->next=0;
	return ADD(list, o);

}
struct node *REMOVE(struct node *list, struct node *c)
{
	if(list==c)
		{
			list=c->next;
			c->next=0;
			return list;
		}
	struct node *o = list;
	while(o->next!=c)
		o=o->next;
	o->next=c->next;
	c->next=0;
	return list;
}

struct node *BEST(struct node *list)
{
	struct node *o,*m;
	o=list;
	m=list;
	int min=o->g+o->f;
	while(o)
	{
		if(o->f+o->g<min)
		{
			min=o->f+o->g;
			m=o;
		}
		o=o->next;
	}
	return m;
}

int MIN(int x,int y,struct node *list)
{

	struct node *o;
	o=list;
	int min=100000;
	while(o)
	{
		if((o->f+o->g<min)&&(o->x==x)&&(o->y==y))
		{
			min=o->f+o->g;
		}
		o=o->next;
	}
	return min;
}





int NAVIGATE(unsigned int x, unsigned int y)
{
	int dir = STRAIGHT;
	int speed = STOP;

	if(abs((x - w/2))* TRESH_DIR > y)
	{
		if(x>w/2)
			dir=RIGHT;
		if(x<w/2)
			dir=LEFT;
		speed = HF;
	}
	else
	{
		if(h-y>TRESH_Y_SPEED)
			speed = FF;
		else
			speed = HF;

	}
	*FB = speed;
	*LR = dir;
	print("DECISION:\n");
	xil_printf("\t FB = %x:\n", *FB);
	xil_printf("\t LR = %x:\n", *LR);

	return 0;
}

int BORDER_CHECK(int x, int y)
{
	int k = ESTIMATE_SIZE(x,y);
	struct edge *e;
	e = edgelist;
	while(e)
	{
		if((x - e->x)^2 + (y - e->y)^2 < k^2)
			return 0;
		e=e->next;
	}

	return 1;
}


int TARGET_REACHED()
{
	*ctr=0x00;
	print("TARGET REACHED\n");
	//xil_printf("\t ctr = %x",ctr);
	for(;;);
	return 0;
}

int EDGE_DISTANCE(int i, int j)
{
	struct edge *e=edgelist;
	int d;
	int dis=10000;
	while(e)
			{
				d=sqrt32((e->x-i)*(e->x-i)+(e->y-j)*(e->y-j));
				if(dis>d)	dis=d;
				e=e->next;
			}
	return dis;
}

int PROBE(int x, int y, struct node *m)
{
	if((x <= jump) || ( w-x <= jump))
		{
	if(!barrier->parent)
		{
			barrier->parent = m;
			barrier->x=x;
			barrier->y=y;

		}
		else
		if(barrier->y>y)
		{
			barrier->parent = m;
			barrier->x=x;
			barrier->y=y;
		}
	}

	if((abs(x - goal_x) <= jump) && ( abs(y - goal_y) <= jump))
	{
		return 0;
	}
	int clearance = jump;//ESTIMATE_SIZE(x,h-y);
	if(EDGE_DISTANCE(x,y)>clearance)
	{

		return gweight*sqrt32( (goal_x - x)*(goal_x - x) + (goal_y - y)*(goal_y - y) );
	}
	return 100000;
}


int PRINT_LIST(struct node *list)
{
	struct node *n;
	n=list;
	xil_printf("BEGIN\n");
	while(n)
	{
		xil_printf("%f %f %d %d \n",n->g,n->f,n->x,n->y);
		n=n->next;
	}
	xil_printf("END \n\n\n\n");
	return 1;
}

int CLEAN_UP(struct node *openlist,struct node *closedlist)
{
	struct node *x;
	struct node *y;
	x=openlist;
	while(x)
	{
		y=x;
		x=x->next;
		RELEASE_NODE(y);
	}
	x=closedlist;
	while(x)
	{
		y=x;
		x=x->next;
		RELEASE_NODE(y);
	}
	return 1;
}




int PRINT_EDGE_LIST()
{
	struct edge *e=edgelist;
	struct edge *p;
	while(e)
			{
				//xil_printf("%d %d\n", e->x, e->y);

				p=e->next;
				RELEASE_EDGE(e);
				e=p;
			}
	return 1;
}

int PRINT_RESULT(struct node *q)
{
	struct node *o;
	o=q;
	struct edge *e;
	g_x=0;
	g_y=0;
	if(o)
	{
		while(o->next)
			o=o->next;
		//xil_printf("%d %d\n",o->x,o->y);

		while(o->parent)
		{
			o=o->parent;
			//xil_printf("%d %d\n",o->x,o->y);

		e=edgelist;
		while(e)
		{
			if(((( (o->x + 3*jump > e->x) && (e->x + 3*jump > start_x))||((o->x < 3*jump + e->x)&&(e->x < 3*jump + start_x)))&&(3*jump + e-> y > o->y)))
				break;
			e=e->next;
		}
		if((e==0)&&(g_x==0)&&(g_y==0))
		{
			g_x=o->x;
			g_y=o->y;
		}
		}

	}



return 1;
}

int SEARCH()
{
	//int i=0;
	int x = start_x;
	int y = start_y;
	struct node *openlist = 0;
	struct node *o;
	struct node *m;
	struct node *closedlist = 0;
	int f,g;
	openlist=NEW(x, y,0,PROBE(x,y,0),0,openlist);
	while(openlist)
	{
		//i=i+1;
		//xil_printf("%d \n",i);
		//MOVE FROM OPEN TO CLOSED
		m=BEST(openlist);
		closedlist=ADD(closedlist,m);
		openlist=REMOVE(openlist,m);

		//EXPAND SUCCESSORS
		f=m->f+jump;
		if(m->x>jump-1)
		{
			g=PROBE(m->x-jump,m->y,m);
			if((g!=100000)&&(f+g<MIN(m->x-jump,m->y,openlist))&&(f+g<MIN(m->x-jump,m->y,closedlist)))
			{
				openlist=NEW(m->x-jump,m->y,f,g,m,openlist);
			}
			if(g==0) break;

		}

	if(m->x<w-jump)
		{

			g=PROBE(m->x+jump,m->y,m);
			if((g!=100000)&&(f+g<MIN(m->x+jump,m->y,openlist))&&(f+g<MIN(m->x+jump,m->y,closedlist)))
				openlist=NEW(m->x+jump,m->y,f,g,m,openlist);
			if(g==0) break;

		}

	if(m->y<h-jump)
		{
			g=PROBE(m->x,m->y+jump,m);
			if((g!=100000)&&(f+g<MIN(m->x,m->y+jump,openlist))&&(f+g<MIN(m->x,m->y+jump,closedlist)))
				openlist=NEW(m->x,m->y+jump,f,g,m,openlist);
			if(g==0) break;

		}
	if(m->y>jump-1)
		{
			g=PROBE(m->x,m->y-jump,m);
			if((g!=100000)&&(f+g<MIN(m->x,m->y-jump,openlist))&&(f+g<MIN(m->x,m->y-jump,closedlist)))
				openlist=NEW(m->x,m->y-jump,f,g,m,openlist);
			if(g==0) break;

		}
	}
	o=m;
	while(o->parent)
	{
		o=o->parent;
	}
	//print("DONE");
	if(openlist)
	PRINT_RESULT(openlist);
	else
	PRINT_RESULT(barrier);
	barrier=0;
	//print("CLEAN_UP");
	CLEAN_UP(openlist,closedlist);
	return 0;


}

int INIT()
{
	//init_mempool(0x8000, 0x1000);
	//h=242;
	//w=402;
	*ctr=0xFFFF;
	h=121;
	w=201;
	start_y=h;
	start_x=w/2;
	goal_y=0;
	goal_x=w/2;
    free_edges=PREALLOCATE_EDGES(2000);
    free_nodes=PREALLOCATE_NODES(2000);
    barrier=malloc(sizeof(struct node));
    barrier->next=0;
    barrier->parent=0;

	return 1;

}



int main() {


	//init_platform();

	xil_printf("BEGIN\n\r");
	INIT();
	print("INIT COMPLETE\n\r");
	//getchar();

	for(;;)
	{
		GENERATE_EDGE_LIST();
		//
		xil_printf("LOADED\n");

		PRINT_EDGE_LIST();

		//xil_printf("START SEARCH\n");
		//SEARCH();

		//NAVIGATE(g_x,g_y);
		//xil_printf("%d %d %d\n",*ctr,*FB,*LR);
		//xil_printf("%d %d\n",g_x,g_y);
		//xil_printf("END SEARCH\n");
		//printf("%d %d",g_x,g_y);
		//getchar();
		//CLEAR_FREE_LISTS();
		//PRINT_EDGE_LIST();
		//getchar();
		//getchar();
	}

	   cleanup_platform();
	return 0;
}
